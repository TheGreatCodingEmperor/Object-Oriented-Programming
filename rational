//2017/5/1
//Houng Tzu Yu 404410098
//Computer Science and Information Engeneering Sophomore
#include<iostream>
#include<cstdlib>
#include<cstring>
using namespace std;

int abs(int a){ return a<0?-a:a; }	//abs number
int factor(int a,int b)				//pre: input number a and b
{									//post:find two number's maximum factor
	if(a==0)return b;
	else if(b==0)return a;
	if(a>=b)a=a%b;
	else b=b%a;
	factor(a,b);
}
void normal(int &a,int &b ,const int f)//pre:input number a and b and max factor
{									   //post:normalize a and b
	if (f==0){a=0;b=1;return;}
	a=a/f;
	b=b/f;
	if(b<0)
	{
		b=abs(b);
		a*=-1;
	}
	return;
}

class rational
{
	public:
		rational():numerator(0),denumerator(1){}		//initialization numerator(0) and denumerator(1)
		rational(int a,int b){numerator=a;denumerator=b;}//intialization numerator and denumerator with input a and b
		friend istream&  operator>>(istream &is, rational &tmp);//cin for assign numerator and denumerator
		friend ostream&  operator<<(ostream &os, rational &tmp);//cout for numerator and denumerator
		void input(const int a,const int b){numerator=a,denumerator=b;}//assign numerator and denumerator with input a and b
		const int getNumerator(){return numerator;}//get numerator
		const int getDenumerator(){return denumerator;}//get denumerator
		
		friend rational operator *(rational &r1,rational &r2);//input r1 and r2 to get r1 * r2
		friend rational operator /(rational &r1,rational &r2);//input r1 and r2 to get r1 / r2
		friend bool operator ==(rational &r1,rational &r2);//compare r1 == r2 is true or false
		
		bool operator <(rational &tmp);//compare r1 < r2 is true or false
		bool operator <=(rational &tmp);//compare r1 <= r2 is true or false
		bool operator >(rational &tmp);//compare r1 > r2 is true or false
		bool operator >=(rational &tmp);//compare r1 >= r2 is true or false
		int operator [](int tmp){if(tmp==0)return numerator;//output numerator when [0]
		else if(tmp==1) return denumerator;}//output denumerator when [1]
	private:
		int numerator;
		int denumerator;
};


istream& operator >>(istream &is ,rational &tmp)
{
	char s[1000],t[1000];
	int i,j,a,b,len,f;
	
	b=1;
	is.getline(s,1000);
	i=0;
	len=strlen(s);
	while((s[i]!='/')&&(i<len))
		i++;
	s[i]='\n';
	i++;
	a=atoi(s);
	if(i<len)
	{
		for(j=0;i<=len;i++,j++)
			t[j]=s[i];
		b=atoi(t);
	}
	f=factor(abs(a),abs(b));
	normal(a,b,f);
	if(b==0){cout<<"wrong input\n"; exit(1);}
	tmp.input(a,b);
	return is;
}
ostream& operator <<(ostream &os ,rational &tmp)
{
	char t;
	os<<tmp.getNumerator()<<'/'<<tmp.getDenumerator();
	return os;
}

const rational operator +(rational &r1,rational &r2)//input r1 and r2 to get r1 + r2
{
	int n1=r1.getNumerator();
	int d1=r1.getDenumerator();
	int n2=r2.getNumerator();
	int d2=r2.getDenumerator();
	int f=factor(abs(d1),abs(d2));
	normal(n1,d1,f);
	normal(n2,d2,f);
	int denum=d2*d1;
	int num=n1*d2+n2*d1;
	f=factor(abs(num),abs(denum));
	normal(num,denum,f);
	return rational(num,denum);
}
const rational operator -(rational &r1,rational &r2)//input r1 and r2 to get r1 - r2
{
	int n1=r1.getNumerator();
	int d1=r1.getDenumerator();
	int n2=r2.getNumerator();
	int d2=r2.getDenumerator();
	int f=factor(abs(d1),abs(d2));
	normal(n1,d1,f);
	normal(n2,d2,f);
	int denum=d2*d1;
	int num=n1*d2-n2*d1;
	f=factor(abs(num),abs(denum));
	normal(num,denum,f);
	return rational(num,denum);
}
const rational operator -(rational &tmp)//input r1 or r2 to get -r1 or -r2
{
	int a=tmp.getNumerator();
	int b=tmp.getDenumerator();
	a*=-1;
	int f=factor(abs(a),abs(b));
	normal(a,b,f);
	return rational(a,b);
	
}

rational operator *(rational &r1,rational &r2)
{
	int a=r1.numerator*r2.numerator;
	int b=r1.denumerator*r2.denumerator;
	int f=factor(a,b);
	normal(a,b,f);
	return rational(a,b);
}
rational operator /(rational &r1,rational &r2)
{
	int a=r1.numerator*r2.denumerator;
	int b=r1.denumerator*r2.numerator;
	if(b==0)return rational(a,b);
	int f=factor(abs(a),abs(b));
	normal(a,b,f);
	return rational(a,b);
}
bool  operator ==(rational &r1,rational &r2)
{
	int n1=r1.numerator;
	int d1=r1.denumerator;
	int n2=r2.numerator;
	int d2=r2.denumerator;
	int f=factor(abs(n1),abs(d1));
	normal(n1,d1,f);
	f=factor(abs(n2),abs(d2));
	normal(n2,d2,f);
	if (n1==n2&&d1==d2)return true;
	else return false;
}

bool rational::operator <(rational &tmp)
{
	if(numerator*tmp.denumerator<denumerator*tmp.numerator)
		return true;
	else return false;
}
bool rational::operator <=(rational &tmp)
{
	if(numerator*tmp.denumerator<=denumerator*tmp.numerator)
		return true;
	else return false;
}
bool rational::operator >(rational &tmp)
{
	if(numerator*tmp.denumerator>denumerator*tmp.numerator)
		return true;
	else return false;
}
bool rational::operator >=(rational &tmp)
{
	if(numerator*tmp.denumerator>=denumerator*tmp.numerator)
		return true;
	else return false;
}

int main(void)
{
	bool answer;
	int tmp;
	cout<<"Input 2 rational number\n";
	cout<<"Enter a rational number in form of a/b or a\n";
	cout<<"You can just press Enter to skip this input\n";
	cout<<"Do not enter two rational number in the same line\n";
	
	rational r1,r2,r3;
	cin>>r1>>r2; 
	cout<<"r1 = "<<r1<<endl;
	cout<<"r2 = "<<r2<<endl;
	
	r3=r1+r2;
	cout<<r1<<" + "<<r2<<" = ";
	cout<<r3<<endl;
	
	r3=r1-r2;
	cout<<r1<<" - "<<r2<<" = ";
	cout<<r3<<endl;
	
	r3=-r1;
	cout<<" - "<<r1<<" = ";
	cout<<r3<<endl;
	
	r3=-r2;
	cout<<" - "<<r2<<" = ";
	cout<<r3<<endl;
	
	r3=r1*r2;
	cout<<r1<<" * "<<r2<<" = "; 
	cout<<r3<<endl;
	
	r3=r1/r2;
	cout<<r1<<" / "<<r2<<" = ";
	if(r3.getDenumerator() ==0)
		cout<<"No answer\n";
	else
		cout<<r3<<endl;
	
	answer=r1==r2;
	cout<<r1<<" == "<<r2<<" = ";
	if(answer==true)
	cout<<"true"<<endl;
	else
	cout<<"false\n";
	
	answer=r1<r2;
	cout<<r1<<" < "<<r2<<" = ";
	if(answer==true)
	cout<<"true"<<endl;
	else
	cout<<"false\n";
	
	answer=r1<=r2;
	cout<<r1<<" <= "<<r2<<" = ";
	if(answer==true)
	cout<<"true"<<endl;
	else
	cout<<"false\n";
	
	answer=r1>r2;
	cout<<r1<<" > "<<r2<<" = ";
	if(answer==true)
	cout<<"true"<<endl;
	else
	cout<<"false\n";
	
	answer=r1>=r2;
	cout<<r1<<" >= "<<r2<<" = ";
	if(answer==true)
	cout<<"true"<<endl;
	else
	cout<<"false\n";
		
	cout<<r1<<" [0] "<<" = ";
	tmp=r1[0];
	cout<<tmp<<endl;
	
	cout<<r1<<" [1] "<<" = ";
	tmp=r1[1];
	cout<<tmp<<endl;
	
	tmp=r2[0];
	cout<<r2<<" [0] "<<" = ";
	cout<<tmp<<endl;
	
	tmp=r2[1];
	cout<<r2<<" [1] "<<" = ";
	cout<<tmp<<endl;
}
